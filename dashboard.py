import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import src.ApiHandler.data_api as data_api
import src.DataHandler.data_handler as data_handler
import src.DataHandler.feature_engineering as feature_engineering
import src.ModelHandler.predict as predict

st.set_page_config(page_title="Dashboard BTC", layout="wide")

def main():
    st.title("Dashboard de Previs√£o de Pre√ßo do BTC")
    
    # Sidebar para controles
    st.sidebar.header("Controles")
    
    # Bot√£o para atualizar dados
    if st.sidebar.button("Atualizar Dados"):
        with st.spinner("Atualizando dados..."):
            # Busca dados dos √∫ltimos 365 dias
            end_date = datetime.now().strftime("%Y-%m-%d")
            start_date = (datetime.now() - timedelta(days=365)).strftime("%Y-%m-%d")
            
            df = data_api.get_btc_data(start_date=start_date, end_date=end_date)
            if not df.empty:
                data_handler.save_data(df)
                st.sidebar.success("Dados atualizados!")
            else:
                st.sidebar.error("Erro ao atualizar dados")
    
    # Carrega dados existentes
    df = data_handler.load_data()
    
    if df.empty:
        st.warning("Nenhum dado encontrado. Clique em 'Atualizar Dados' para come√ßar.")
        return
    
    # Gr√°fico de pre√ßos
    st.subheader("Hist√≥rico de Pre√ßos do Bitcoin")
    
    fig = px.line(df.reset_index(), x='date', y='Close', 
                  title="Pre√ßo de Fechamento do BTC (USD)",
                  labels={'date': 'Data', 'Close': 'Pre√ßo (USD)'})
    fig.update_layout(height=500)
    st.plotly_chart(fig, use_container_width=True)
    
    # Estat√≠sticas b√°sicas
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Pre√ßo Atual", f"${df['Close'].iloc[-1]:,.2f}")
    
    with col2:
        change = df['Close'].iloc[-1] - df['Close'].iloc[-2]
        st.metric("Varia√ß√£o Di√°ria", f"${change:,.2f}", f"{change:+.2f}")
    
    with col3:
        st.metric("M√°ximo (30d)", f"${df['High'].tail(30).max():,.2f}")
    
    with col4:
        st.metric("M√≠nimo (30d)", f"${df['Low'].tail(30).min():,.2f}")
    
    # Se√ß√£o de previs√£o
    st.subheader("Previs√£o para Amanh√£")
    
    if st.button("Gerar Previs√£o para Amanh√£", type="primary"):
        try:
            with st.spinner("Gerando previs√£o..."):
                # Aplica engenharia de features
                df_features = feature_engineering.create_features(df)
                
                if df_features.empty:
                    st.error("Dados insuficientes para gerar previs√£o")
                    return
                
                # Faz previs√£o
                prediction = predict.make_prediction(df_features)
                
                # Exibe resultado
                if prediction == 1:
                    st.success("### Tend√™ncia para amanh√£: **ALTA** üìà")
                    st.info("O modelo prev√™ que o pre√ßo do Bitcoin subir√° amanh√£.")
                else:
                    st.error("### Tend√™ncia para amanh√£: **QUEDA** üìâ")
                    st.info("O modelo prev√™ que o pre√ßo do Bitcoin cair√° amanh√£.")
                
        except FileNotFoundError:
            st.error("Modelo n√£o encontrado. Execute o treinamento primeiro.")
        except Exception as e:
            st.error(f"Erro ao gerar previs√£o: {e}")
    
    # Informa√ß√µes adicionais
    with st.expander("Informa√ß√µes do Dataset"):
        st.write(f"**Per√≠odo dos dados:** {df.index.min().strftime('%Y-%m-%d')} at√© {df.index.max().strftime('%Y-%m-%d')}")
        st.write(f"**Total de registros:** {len(df)}")
        st.write("**Colunas:** Open, High, Low, Close, Volume")

if __name__ == "__main__":
    main()